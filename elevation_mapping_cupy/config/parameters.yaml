resolution: 0.04                                # resolution in m.
map_length: 12                                  # map's size in m.
sensor_noise_factor: 0.05                       # point's noise is sensor_noise_factor*z^2 (z is distance from sensor).
mahalanobis_thresh: 2.0                         # points outside this distance is outlier.
outlier_variance: 0.001                         # if point is outlier, add this value to the cell.
drift_compensation_variance_inler: 0.1          # cells under this value is used for drift compensation.
time_variance: 0.01                             # add this value when update_variance is called.
max_variance: 100.0                             # maximum variance for each cell.
initial_variance: 100.0                         # initial variance for each cell.
traversability_inlier: 0.9                      # cells with higher traversability are used for drift compensation.
dilation_size: 2                                # dilation filter size before traversability filter.
wall_num_thresh: 100                            # if there are more points than this value, only higher points than the current height are used to make the wall more sharp.
min_height_drift_cnt: 100                       # drift compensation only happens if the valid cells are more than this number.
position_noise_thresh: 0.001                    # if the position change is bigger than this value, the drift compensation happens.
orientation_noise_thresh: 0.001                 # if the orientation change is bigger than this value, the drift compensation happens.
position_lowpass_alpha: 0.1                     # lowpass filter alpha used for detecting movements.
orientation_lowpass_alpha: 0.1                  # lowpass filter alpha used for detecting movements.
min_valid_distance: 0.3                         # points with shorter distance will be filtered out.
max_height_range: 1.0                           # points higher than this value from sensor will be filtered out to disable ceiling.
recordable_fps: 3.0                             # fps for publishing map (in slower rate to record).

max_ray_length: 10.0                            # maximum length for ray tracing.
cleanup_step: 1.0                               # subtitute this value from validity layer at visibiltiy cleanup.
cleanup_cos_thresh: 0.5                         # subtitute this value from validity layer at visibiltiy cleanup.

safe_thresh: 0.7                                # if traversability is smaller, it is counted as unsafe cell.
safe_min_thresh: 0.4                            # polygon is unsafe if there exists lower traversability than this.
max_unsafe_n: 10                                # if the number of cells under safe_thresh exceeds this value, polygon is unsafe.

min_filter_size: 3
min_filter_iteration: 4

gather_mode: 'mean'                             # gather mode (currently only mean is possible).
enable_edge_sharpen: true
enable_visibility_cleanup: true
enable_drift_compensation: true
enable_pointcloud_publishing: false
enable_normal: true
enable_normal_color: true
enable_normal_arrow_publishing: false

weight_file: 'config/weights.dat'

# pointcloud_topics: ['/realsense_d435_front/depth/color/points',
pointcloud_topics: [
                    # '/point_cloud_filter/realsense_d435_front/point_cloud_filtered',
                    # '/point_cloud_filter/rslidar/point_cloud',
                    # '/point_cloud_filter/realsense_d435_rear/point_cloud_filtered',
                    '/point_cloud_filter/rslidar/point_cloud',
                    '/point_cloud_filter/realsense_d435_left/point_cloud_filtered',
                    '/point_cloud_filter/realsense_d435_right/point_cloud_filtered',
                    '/realsense_d435_front/depth/color/points',
                    '/realsense_d435_rear/depth/color/points',
                    # '/realsense_d435_left/depth/color/points',
                    # '/realsense_d435_right/depth/color/points',
                    # '/point_cloud_filter/quadruple_realsense/point_cloud_filtered',
                    '/velodyne/point_cloud']
pose_topic: '/state_estimator/pose_in_odom'
recordable_map_layers: ['elevation', 'color']
map_frame: 'odom'

#  Initialization
initialize_method: 'linear'                                         # Choose one from 'nearest', 'linear', 'cubic'
initialize_frame_id: ['RF_FOOT', 'LF_FOOT', 'RH_FOOT', 'LH_FOOT']   # One tf (like ['footprint'] ) initializes a square around it.
initialize_tf_offset: [0.0, 0.0, 0.0, 0.0]                          # z direction. Should be same number as initialize_frame_id.
dilation_size_initialize: 3                                         # dilation size after the init.
initialize_tf_grid_size: 1.0                                        # This is not used if number of tf is more than 3.
